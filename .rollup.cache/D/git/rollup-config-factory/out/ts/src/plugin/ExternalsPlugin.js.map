{"version":3,"file":"ExternalsPlugin.js","sourceRoot":"","sources":["../../../../src/plugin/ExternalsPlugin.ts"],"names":[],"mappings":"AAOA,MAAM,OAAO,eAAe;IAChB,OAAO,CAAS;IAC1B,QAAQ,CAA2B;IACnC,qBAAqB,GAA4B,CAAC,MAAM,EAAE,QAAQ,EAAE,UAAU,EAAE,EAAE;QAChF,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,GAAG,EAAE,CAAC;YACxB,OAAM;QACR,CAAC;QACD,MAAM,gBAAgB,GAAG,CAAC,cAAc,EAAE,kBAAkB,EAAE,sBAAsB,EAAE,iBAAiB,CAAC,CAAA;QACxG,KAAK,MAAM,KAAK,IAAI,gBAAgB,EAAE,CAAC;YACrC,KAAK,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,EAAE,CAAC;gBAC9D,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAA;gBAChB,IAAI,MAAM,KAAK,GAAG,EAAE,CAAC;oBACnB,OAAO,IAAI,CAAA;gBACb,CAAC;gBACD,IAAI,MAAM,CAAC,UAAU,CAAC,GAAG,GAAG,GAAG,CAAC,EAAE,CAAC;oBACjC,OAAO,IAAI,CAAA;gBACb,CAAC;YACH,CAAC;QACH,CAAC;IACH,CAAC,CAAA;IACD,YAAY,UAA4B,EAAE;QACxC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAA;IACxB,CAAC;IACD,KAAK,CAAC,OAAsB,EAAE,KAAY;QACxC,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAA;QACvB,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,eAAe,CAAC,IAAI,EAAE,KAAK,IAAI,EAAE;YAC/C,OAAO,CAAC,GAAG,CAAC,UAAU,EAAE,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAA;QAChE,CAAC,CAAC,CAAA;IACJ,CAAC;CACF","sourcesContent":["import type {ConfigBuilder, ConfigBuilderPlugin, Hooks} from '../ConfigBuilder.js'\nimport type {RollupOptions} from 'rollup'\n\nexport type Options = {}\n\ntype ExternalsFilterFunction = Exclude<NonNullable<RollupOptions['external']>, Array<RegExp | string> | RegExp | string | void | null | undefined>\n\nexport class ExternalsPlugin implements ConfigBuilderPlugin {\n  protected options: Options\n  #builder: ConfigBuilder | undefined\n  #externalsFilterByPkg: ExternalsFilterFunction = (source, importer, isResolved) => {\n    if (!this.#builder?.pkg) {\n      return\n    }\n    const dependencyFields = [`dependencies`, `peerDependencies`, `optionalDependencies`, `devDependencies`]\n    for (const field of dependencyFields) {\n      for (const key of Object.keys(this.#builder.pkg[field] ?? {})) {\n        console.dir(key)\n        if (source === key) {\n          return true\n        }\n        if (source.startsWith(`${key}/`)) {\n          return true\n        }\n      }\n    }\n  }\n  constructor(options: Partial<Options> = {}) {\n    this.options = options\n  }\n  apply(builder: ConfigBuilder, hooks: Hooks) {\n    this.#builder = builder\n    hooks.build.tap(ExternalsPlugin.name, async () => {\n      builder.set(`external`, this.#externalsFilterByPkg.bind(this))\n    })\n  }\n}\n"]}