{"version":3,"file":"CommonPlugin.js","sourceRoot":"","sources":["../../../../src/plugin/CommonPlugin.ts"],"names":[],"mappings":"AAKA,MAAM,OAAO,YAAY;IACb,OAAO,CAAS;IAChB,GAAG,CAAyB;IACtC,YAAY,UAA4B,EAAE;QACxC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAA;IACxB,CAAC;IACD,KAAK,CAAC,OAAsB,EAAE,KAAY;QACxC,KAAK,CAAC,KAAK,CAAC,UAAU,CAAC,YAAY,CAAC,IAAI,EAAE,KAAK,IAAI,EAAE;YACnD,OAAO,CAAC,UAAU,CAAC,qCAAqC,EAAE,IAAI,CAAC,CAAA;YAC/D,OAAO,CAAC,UAAU,CAAC,oCAAoC,EAAE,IAAI,CAAC,CAAA;YAC9D,OAAO,CAAC,UAAU,CAAC,sCAAsC,EAAE,IAAI,CAAC,CAAA;QAClE,CAAC,CAAC,CAAA;QACF,KAAK,CAAC,eAAe,CAAC,GAAG,CAAC,YAAY,CAAC,IAAI,EAAE,GAAG,EAAE;YAChD,OAAO,CAAC,UAAU,CAAC,kBAAkB,EAAE,QAAQ,CAAC,CAAA;QAClD,CAAC,CAAC,CAAA;QACF,KAAK,CAAC,gBAAgB,CAAC,GAAG,CAAC,YAAY,CAAC,IAAI,EAAE,GAAG,EAAE;YACjD,OAAO,CAAC,UAAU,CAAC,kBAAkB,EAAE,QAAQ,CAAC,CAAA;QAClD,CAAC,CAAC,CAAA;QACF,KAAK,CAAC,eAAe,CAAC,GAAG,CAAC,YAAY,CAAC,IAAI,EAAE,OAAO,CAAC,EAAE;YACrD,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE,CAAC;gBAC/C,OAAO,OAAO,CAAA;YAChB,CAAC;YACD,MAAM,IAAI,GAAG,OAAO,CAAC,GAAG,KAAK,YAAY,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,aAAa,CAAA;YACxE,OAAO;gBACL,GAAG,OAAO;gBACV,YAAY,EAAE,OAAO,CAAC,YAAY,CAAC,UAAU,CAAC,UAAU,EAAE,IAAI,CAAC;aAChE,CAAA;QACH,CAAC,CAAC,CAAA;IACJ,CAAC;CACF","sourcesContent":["import type {ConfigBuilder, ConfigBuilderPlugin, Hooks} from '../ConfigBuilder.js'\nimport type {PackageJson} from 'type-fest'\n\nexport type Options = {}\n\nexport class CommonPlugin implements ConfigBuilderPlugin {\n  protected options: Options\n  protected pkg: PackageJson | undefined\n  constructor(options: Partial<Options> = {}) {\n    this.options = options\n  }\n  apply(builder: ConfigBuilder, hooks: Hooks) {\n    hooks.build.tapPromise(CommonPlugin.name, async () => {\n      builder.setDefault(`output.generatedCode.arrowFunctions`, true)\n      builder.setDefault(`output.generatedCode.constBindings`, true)\n      builder.setDefault(`output.generatedCode.objectShorthand`, true)\n    })\n    hooks.buildProduction.tap(CommonPlugin.name, () => {\n      builder.setDefault(`output.sourcemap`, `hidden`)\n    })\n    hooks.buildDevelopment.tap(CommonPlugin.name, () => {\n      builder.setDefault(`output.sourcemap`, `hidden`)\n    })\n    hooks.finalizeOptions.tap(CommonPlugin.name, options => {\n      if (!options.outputFolder.includes(`{{mode}}`)) {\n        return options\n      }\n      const mode = options.env === `production` ? `production` : `development`\n      return {\n        ...options,\n        outputFolder: options.outputFolder.replaceAll(`{{mode}}`, mode),\n      }\n    })\n  }\n}\n"]}