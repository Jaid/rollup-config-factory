{"version":3,"file":"MinifyPlugin.js","sourceRoot":"","sources":["../../../../src/plugin/MinifyPlugin.ts"],"names":[],"mappings":"AAIA,OAAO,YAAY,MAAM,uBAAuB,CAAA;AAChD,OAAO,KAAK,MAAM,MAAM,WAAW,CAAA;AAWnC,MAAM,iBAAiB,GAA0B,IAAI,CAAA;AACrD,MAAM,oBAAoB,GAAkB;IAC1C,MAAM,EAAE,IAAI;IACZ,IAAI,EAAE,iBAAiB;IACvB,QAAQ,EAAE;QACR,MAAM,EAAE,GAAG;QACX,YAAY,EAAE,IAAI;QAClB,WAAW,EAAE,IAAI;QACjB,aAAa,EAAE,IAAI;QACnB,gBAAgB,EAAE,IAAI;QACtB,oBAAoB,EAAE,IAAI;QAC1B,eAAe,EAAE,IAAI;QACrB,cAAc,EAAE,IAAI;QACpB,YAAY,EAAE,IAAI;QAClB,IAAI,EAAE,iBAAiB;KACxB;IACD,MAAM,EAAE;QACN,IAAI,EAAE,iBAAiB;QACvB,UAAU,EAAE,KAAK;QACjB,cAAc,EAAE,KAAK;KACtB;CACF,CAAA;AACD,MAAM,gCAAgC,GAAkB;IACtD,QAAQ,EAAE;QACR,UAAU,EAAE,KAAK;QACjB,UAAU,EAAE,IAAI;QAChB,QAAQ,EAAE,IAAI;QACd,aAAa,EAAE,IAAI;KACpB;CACF,CAAA;AACD,MAAM,cAAc,GAAG;IACrB,YAAY,EAAE,SAAuC;CACtD,CAAA;AACD,MAAM,GAAG,GAAG,IAAI,GAAG,CAAyD;IAC1E,CAAC,SAAS,EAAE,oBAAoB,CAAC;IACjC,CAAC,YAAY,EAAE,MAAM,CAAC,YAAY,CAAC,gCAAgC,EAAE,oBAAoB,CAAC,CAAC;CAC5F,CAAC,CAAA;AACF,MAAM,OAAO,YAAY;IACvB,OAAO,CAAmB;IAC1B,uBAAuB,GAAG,GAAG,EAAE;QAC7B,OAAO,GAAG,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,IAAI,oBAAoB,CAAA;IACnE,CAAC,CAAA;IACD,kBAAkB,GAAG,GAAG,EAAE;QACxB,MAAM,MAAM,GAAG,IAAI,CAAC,uBAAuB,EAAE,CAAA;QAC7C,IAAI,IAAI,CAAC,OAAO,CAAC,aAAa,KAAK,SAAS,EAAE,CAAC;YAC7C,OAAO,MAAM,CAAA;QACf,CAAC;QACD,MAAM,OAAO,GAAkB;YAC7B,GAAG,MAAM;YACT,GAAG,IAAI,CAAC,OAAO,CAAC,aAAa;SAC9B,CAAA;QACD,OAAO,OAAO,CAAA;IAChB,CAAC,CAAA;IACD,wBAAwB,GAAG,GAAwB,EAAE;QACnD,MAAM,OAAO,GAAwB,IAAI,CAAC,kBAAkB,EAAE,CAAA;QAC9D,IAAI,IAAI,CAAC,OAAO,CAAC,mBAAmB,KAAK,SAAS,EAAE,CAAC;YACnD,OAAO,OAAO,CAAA;QAChB,CAAC;QACD,OAAO;YACL,GAAG,OAAO;YACV,GAAG,IAAI,CAAC,OAAO,CAAC,mBAAmB;SACpC,CAAA;IACH,CAAC,CAAA;IACD,YAAY,UAAgC,EAAE;QAC5C,IAAI,CAAC,OAAO,GAAG;YACb,GAAG,cAAc;YACjB,GAAG,OAAO;SACX,CAAA;IACH,CAAC;IACD,KAAK,CAAC,OAAsB,EAAE,KAAY;QACxC,KAAK,CAAC,eAAe,CAAC,UAAU,CAAC,YAAY,CAAC,IAAI,EAAE,KAAK,IAAI,EAAE;YAC7D,MAAM,aAAa,GAAG,IAAI,CAAC,wBAAwB,EAAE,CAAA;YACrD,OAAO,CAAC,eAAe,CAAC,YAAY,EAAE,aAAa,CAAC,CAAA;QACtD,CAAC,CAAC,CAAA;IACJ,CAAC;CACF","sourcesContent":["import type {ConfigBuilder, ConfigBuilderPlugin, Hooks} from '../ConfigBuilder.js'\nimport type {Options as TerserPluginOptions} from '@rollup/plugin-terser'\nimport type {InputOptions} from 'zeug/types'\n\nimport terserPlugin from '@rollup/plugin-terser'\nimport * as lodash from 'lodash-es'\n\ntype TerserOptions = import('terser').MinifyOptions\ntype Options = InputOptions<{\n  defaultsType: typeof defaultOptions\n  optionalOptions: {\n    terserOptions: TerserOptions\n    terserPluginOptions: TerserPluginOptions\n  }\n}>\n\nconst outputEcmaVersion: TerserOptions['ecma'] = 2020\nconst defaultTerserOptions: TerserOptions = {\n  module: true,\n  ecma: outputEcmaVersion,\n  compress: {\n    passes: 100,\n    unsafe_comps: true,\n    unsafe_math: true,\n    unsafe_regexp: true,\n    unsafe_undefined: true,\n    booleans_as_integers: true,\n    unsafe_Function: true,\n    unsafe_methods: true,\n    unsafe_proto: true,\n    ecma: outputEcmaVersion,\n  },\n  format: {\n    ecma: outputEcmaVersion,\n    semicolons: false,\n    wrap_func_args: false,\n  },\n}\nconst aggressiveTerserOptionsAdditions: TerserOptions = {\n  compress: {\n    keep_fargs: false,\n    hoist_funs: true,\n    pure_new: true,\n    unsafe_arrows: true,\n  },\n}\nconst defaultOptions = {\n  terserPreset: `default` as ('aggressive' | 'default'),\n}\nconst map = new Map<Options['defaultsType']['terserPreset'], TerserOptions>([\n  [`default`, defaultTerserOptions],\n  [`aggressive`, lodash.defaultsDeep(aggressiveTerserOptionsAdditions, defaultTerserOptions)],\n])\nexport class MinifyPlugin implements ConfigBuilderPlugin {\n  options: Options['merged']\n  #getTerserOptionsPreset = () => {\n    return map.get(this.options.terserPreset) ?? defaultTerserOptions\n  }\n  #makeTerserOptions = () => {\n    const preset = this.#getTerserOptionsPreset()\n    if (this.options.terserOptions === undefined) {\n      return preset\n    }\n    const options: TerserOptions = {\n      ...preset,\n      ...this.options.terserOptions,\n    }\n    return options\n  }\n  #makeTerserPluginOptions = (): TerserPluginOptions => {\n    const options: TerserPluginOptions = this.#makeTerserOptions()\n    if (this.options.terserPluginOptions === undefined) {\n      return options\n    }\n    return {\n      ...options,\n      ...this.options.terserPluginOptions,\n    }\n  }\n  constructor(options: Options['parameter'] = {}) {\n    this.options = {\n      ...defaultOptions,\n      ...options,\n    }\n  }\n  apply(builder: ConfigBuilder, hooks: Hooks) {\n    hooks.buildProduction.tapPromise(MinifyPlugin.name, async () => {\n      const pluginOptions = this.#makeTerserPluginOptions()\n      builder.addRollupPlugin(terserPlugin, pluginOptions)\n    })\n  }\n}\n"]}