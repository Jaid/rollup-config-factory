{"version":3,"file":"dts-bundle-generator.js","sourceRoot":"","sources":["../../../../../src/plugin/rollupPlugin/dts-bundle-generator.ts"],"names":[],"mappings":"AAGA,OAAO,EAAC,iBAAiB,EAAC,MAAM,sBAAsB,CAAA;AAStD,MAAM,QAAQ,GAAG,CAAC,MAAqB,EAAE,EAAE;IACzC,KAAK,MAAM,EAAE,IAAI,MAAM,CAAC,YAAY,EAAE,EAAE,CAAC;QACvC,MAAM,UAAU,GAAG,MAAM,CAAC,aAAa,CAAC,EAAE,CAAC,CAAA;QAC3C,IAAI,CAAC,UAAU,EAAE,CAAC;YAChB,SAAQ;QACV,CAAC;QACD,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,CAAC;YACxB,SAAQ;QACV,CAAC;QACD,MAAM,iBAAiB,GAAG,cAAc,CAAA;QACxC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,EAAE,CAAC;YAC3C,SAAQ;QACV,CAAC;QACD,OAAO,UAAU,CAAC,EAAE,CAAA;IACtB,CAAC;AACH,CAAC,CAAA;AACD,MAAM,cAAc,GAAG;IACrB,IAAI,EAAE,IAAI;IACV,eAAe,EAAE,KAAK;CACvB,CAAA;AAED,MAAM,CAAC,OAAO,UAAU,wBAAwB,CAAC,gBAAsC,EAAE;IACvF,MAAM,OAAO,GAAsB;QACjC,GAAG,cAAc;QACjB,GAAG,aAAa;KACjB,CAAA;IACD,OAAO;QACL,IAAI,EAAE,sBAAsB;QAC5B,KAAK,CAAC,cAAc;YAClB,MAAM,KAAK,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAA;YAC5B,IAAI,CAAC,KAAK,EAAE,CAAC;gBACX,MAAM,IAAI,KAAK,CAAC,+BAA+B,CAAC,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC,CAAC,MAAM,UAAU,CAAC,CAAA;YAC3F,CAAC;YACD,MAAM,wBAAwB,GAA4C;gBACxE,mBAAmB,EAAE,OAAO,CAAC,YAAY;aAC1C,CAAA;YACD,MAAM,6BAA6B,GAAwD;gBACzF,MAAM,EAAE;oBACN,SAAS,EAAE,OAAO,CAAC,IAAI;oBACvB,QAAQ,EAAE,CAAC,OAAO,CAAC,eAAe;iBACnC;aACF,CAAA;YACD,MAAM,QAAQ,GAA+C;gBAC3D,GAAG,6BAA6B;gBAChC,QAAQ,EAAE,KAAK;aAChB,CAAA;YACD,MAAM,UAAU,GAAG,iBAAiB,CAAC,CAAC,QAAQ,CAAC,EAAE,wBAAwB,CAAC,CAAA;YAC1E,IAAI,UAAU,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;gBAC5B,OAAM;YACR,CAAC;YACD,IAAI,UAAU,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;gBAC1B,MAAM,IAAI,KAAK,CAAC,yCAAyC,UAAU,CAAC,MAAM,EAAE,CAAC,CAAA;YAC/E,CAAC;YACD,IAAI,CAAC,QAAQ,CAAC;gBACZ,IAAI,EAAE,OAAO;gBACb,QAAQ,EAAE,YAAY;gBACtB,MAAM,EAAE,UAAU,CAAC,CAAC,CAAC;aACtB,CAAC,CAAA;QACJ,CAAC;KACF,CAAA;AACH,CAAC","sourcesContent":["import type {Plugin, PluginContext} from 'rollup'\nimport type {InputOptions} from 'zeug/types'\n\nimport {generateDtsBundle} from 'dts-bundle-generator'\n\ntype Options = InputOptions<{\n  defaultsType: typeof defaultOptions\n  optionalOptions: {\n    tsConfigFile: string\n  }\n}>\n\nconst getEntry = (plugin: PluginContext) => {\n  for (const id of plugin.getModuleIds()) {\n    const moduleInfo = plugin.getModuleInfo(id)\n    if (!moduleInfo) {\n      continue\n    }\n    if (!moduleInfo.isEntry) {\n      continue\n    }\n    const isTypescriptRegex = /\\.[cm]?tsx?$/\n    if (!isTypescriptRegex.test(moduleInfo.id)) {\n      continue\n    }\n    return moduleInfo.id\n  }\n}\nconst defaultOptions = {\n  sort: true,\n  generatorBanner: false,\n}\n\nexport default function dtsBundleGeneratorPlugin(pluginOptions: Options['parameter'] = {}): Plugin {\n  const options: Options['merged'] = {\n    ...defaultOptions,\n    ...pluginOptions,\n  }\n  return {\n    name: `dts-bundle-generator`,\n    async generateBundle() {\n      const entry = getEntry(this)\n      if (!entry) {\n        throw new Error(`No entry found, searched in ${[...this.getModuleIds()].length} modules`)\n      }\n      const generateDtsBundleOptions: Parameters<typeof generateDtsBundle>[1] = {\n        preferredConfigPath: options.tsConfigFile,\n      }\n      const generateDtsBundleEntryOptions: Partial<Parameters<typeof generateDtsBundle>[0][0]> = {\n        output: {\n          sortNodes: options.sort,\n          noBanner: !options.generatorBanner,\n        },\n      }\n      const dtsEntry: Parameters<typeof generateDtsBundle>[0][0] = {\n        ...generateDtsBundleEntryOptions,\n        filePath: entry,\n      }\n      const dtsOutputs = generateDtsBundle([dtsEntry], generateDtsBundleOptions)\n      if (dtsOutputs.length === 0) {\n        return\n      }\n      if (dtsOutputs.length > 1) {\n        throw new Error(`Expected only one dts output, but got ${dtsOutputs.length}`)\n      }\n      this.emitFile({\n        type: `asset`,\n        fileName: `types.d.ts`,\n        source: dtsOutputs[0],\n      })\n    },\n  }\n}\n"]}