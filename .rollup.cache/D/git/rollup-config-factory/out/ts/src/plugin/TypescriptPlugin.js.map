{"version":3,"file":"TypescriptPlugin.js","sourceRoot":"","sources":["../../../../src/plugin/TypescriptPlugin.ts"],"names":[],"mappings":"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","sourcesContent":["import type {ConfigBuilder, ConfigBuilderPlugin, Hooks} from '../ConfigBuilder.js'\nimport type sucrasePlugin from '@rollup/plugin-sucrase'\nimport type swcPlugin from '@rollup/plugin-swc'\nimport type typescriptPlugin from '@rollup/plugin-typescript'\nimport type dtsPlugin from 'rollup-plugin-dts'\nimport type tsPlugin from 'rollup-plugin-ts'\nimport type {PackageJson, TsConfigJson} from 'type-fest'\nimport type {InputOptions} from 'zeug/types'\n\nimport {nodeResolve as nodeResolvePlugin} from '@rollup/plugin-node-resolve'\nimport {type CompilerOptions} from 'typescript'\n\nimport dtsBundleGeneratorPlugin from 'src/plugin/rollupPlugin/dts-bundle-generator.js'\n\ntype SwcPluginOptions = NonNullable<Parameters<typeof swcPlugin['default']>[0]>\ntype SucrasePluginOptions = NonNullable<Parameters<typeof sucrasePlugin['default']>[0]>\ntype TypescriptPluginOptions = NonNullable<Parameters<typeof typescriptPlugin['default']>[0]>\ntype NodeResolveOptions = NonNullable<Parameters<typeof nodeResolvePlugin>[0]>\ntype TsPluginOptions = NonNullable<Parameters<typeof tsPlugin>[0]>\ntype DtsPluginOptions = NonNullable<Parameters<typeof dtsPlugin>[0]>\ntype DtsBundleGeneratorPluginOptions = NonNullable<Parameters<typeof dtsBundleGeneratorPlugin>[0]>\n\nexport type Options = InputOptions<{\n  defaultsType: typeof defaultOptions\n  optionalOptions: {\n    env: \"development\" | \"production\"\n  }\n}>\n\nconst defaultOptions = {\n  compiler: `typescript` as \"rollup-plugin-ts\" | \"sucrase\" | \"swc\" | \"typescript\",\n  rewriteEntry: true,\n  declarationEmitter: `dts-bundle-generator` as \"dts-bundle-generator\" | \"rollup-plugin-dts\" | false | undefined,\n  declarationOnlyForProduction: true,\n}\n\nexport class TypescriptPlugin implements ConfigBuilderPlugin {\n  protected options: Options['merged']\n  protected pkg: PackageJson | undefined\n  protected tsconfig: TsConfigJson | undefined\n  #builder: ConfigBuilder\n  constructor(options: Options['parameter'] = {}) {\n    this.options = {\n      ...defaultOptions,\n      ...options,\n    }\n  }\n  apply(builder: ConfigBuilder, hooks: Hooks) {\n    this.#builder = builder\n    hooks.build.tapPromise(TypescriptPlugin.name, async () => {\n      const resolverOptions: NodeResolveOptions = {\n        extensions: [`.js`, `.ts`],\n      }\n      builder.addRollupPlugin(nodeResolvePlugin, resolverOptions)\n      await this.#addCompilerPlugin()\n    })\n    hooks.finalizeConfig.tapPromise(TypescriptPlugin.name, async config => {\n      if (!this.options.rewriteEntry) {\n        return config\n      }\n      if (typeof config.input === `string`) {\n        if (config.input.endsWith(`.js`)) {\n          builder.set(`input`, `${config.input.slice(0, -3)}.ts`)\n        }\n      } else {\n        builder.setDefault(`input`, builder.fromContextFolder(`src/index.ts`))\n      }\n    })\n    hooks.buildProduction.tapPromise(TypescriptPlugin.name, async () => {\n      await this.#addDtsEmitterPlugin()\n    })\n    hooks.buildDevelopment.tapPromise(TypescriptPlugin.name, async () => {\n      if (!this.options.declarationOnlyForProduction) {\n        await this.#addDtsEmitterPlugin()\n      }\n    })\n  }\n  async #addCompilerPlugin() {\n    if (this.options.compiler === `rollup-plugin-ts`) {\n      await this.#addTsPlugin()\n    } else if (this.options.compiler === `sucrase`) {\n      await this.#addSucrasePlugin()\n    } else if (this.options.compiler === `swc`) {\n      await this.#addSwcPlugin()\n    } else {\n      await this.#addTypescriptPlugin()\n    }\n  }\n  async #addDtsBundleGeneratorPlugin() {\n    const options = this.#getDtsBundleGeneratorPluginOptions()\n    this.#builder.addRollupPlugin(dtsBundleGeneratorPlugin, options)\n  }\n  async #addDtsEmitterPlugin() {\n    if (this.options.declarationEmitter === `dts-bundle-generator`) {\n      await this.#addDtsBundleGeneratorPlugin()\n    } else if (this.options.declarationEmitter === `rollup-plugin-dts`) {\n      await this.#addDtsPlugin()\n    }\n  }\n  async #addDtsPlugin() {\n    const {default: dtsPlugin} = await import(`rollup-plugin-dts`)\n    const options = this.#getDtsPluginOptions()\n    this.#builder.addRollupPlugin(dtsPlugin, options)\n  }\n  async #addSucrasePlugin() {\n    const {default: sucrasePlugin} = await import(`@rollup/plugin-sucrase`)\n    const options = this.#getSucrasePluginOptions()\n    // @ts-expect-error\n    this.#builder.addRollupPlugin(sucrasePlugin, options)\n  }\n  async #addSwcPlugin() {\n    const {default: swcPlugin} = await import(`@rollup/plugin-swc`)\n    const options = this.#getSwcPluginOptions()\n    // @ts-expect-error\n    this.#builder.addRollupPlugin(swcPlugin, options)\n  }\n  async #addTsPlugin() {\n    const {default: tsPlugin} = await import(`rollup-plugin-ts`)\n    const options = this.#getTsPluginOptions()\n    this.#builder.addRollupPlugin(tsPlugin, options)\n  }\n  async #addTypescriptPlugin() {\n    const {default: typescriptPlugin} = await import(`@rollup/plugin-typescript`)\n    const options = this.#getTypescriptPluginOptions()\n    // @ts-expect-error\n    this.#builder.addRollupPlugin(typescriptPlugin, options)\n  }\n  #getDtsBundleGeneratorPluginOptions() {\n    const pluginOptions: DtsBundleGeneratorPluginOptions = {\n      tsConfigFile: this.#builder.fromContextFolder(`tsconfig.json`),\n    }\n    return pluginOptions\n  }\n  #getDtsPluginOptions() {\n    const compilerOptions = this.#getTypescriptCompilerOptions()\n    const pluginOptions: DtsPluginOptions = {\n      respectExternal: false,\n      compilerOptions: {\n        ...compilerOptions,\n        declaration: true,\n      },\n    }\n    return pluginOptions\n  }\n  #getSucrasePluginOptions() {\n    const pluginOptions: SucrasePluginOptions = {\n      production: this.#builder.isProduction,\n      exclude: [`node_modules/**`],\n      transforms: [`typescript`],\n    }\n    return pluginOptions\n  }\n  #getSwcPluginOptions() {\n    const pluginOptions: SwcPluginOptions = {\n      swc: {\n        root: this.#builder.contextFolder,\n        cwd: this.#builder.contextFolder,\n        envName: this.#builder.isProduction ? `production` : `development`,\n        sourceMaps: true,\n        jsc: {\n          parser: {\n            syntax: `typescript`,\n            tsx: true,\n            dynamicImport: true,\n            decorators: true,\n          },\n          baseUrl: this.#builder.contextFolder,\n          paths: this.#builder.tsconfig?.compilerOptions?.paths,\n          transform: {\n            legacyDecorator: true,\n            decoratorMetadata: true,\n          },\n          target: `es2022`,\n          keepClassNames: true,\n        },\n      },\n    }\n    return pluginOptions\n  }\n  #getTsPluginOptions() {\n    const compilerOptions = this.#getTypescriptCompilerOptions()\n    const pluginOptions: TsPluginOptions = {\n      tsconfig: {\n        fileName: this.#builder.fromContextFolder(`tsconfig.json`),\n        hook: (loadedConfig: CompilerOptions) => {\n          // @ts-expect-error\n          const tsConfig: CompilerOptions = {\n            ...loadedConfig,\n            ...compilerOptions,\n          }\n          return tsConfig\n        },\n      },\n      transpileOnly: true,\n      transpiler: `typescript`,\n      cwd: this.#builder.contextFolder,\n      browserslist: false,\n    }\n    return pluginOptions\n  }\n  #getTypescriptCompilerOptions(): TsConfigJson['compilerOptions'] {\n    return {\n      module: `esnext`,\n      moduleResolution: `bundler`,\n      target: `es2022`,\n      skipLibCheck: true,\n      outDir: this.#builder.fromOutputFolder(`ts`),\n      rootDir: this.#builder.contextFolder,\n      baseUrl: this.#builder.contextFolder,\n      strict: false,\n      composite: false,\n      declaration: false,\n    }\n  }\n  #getTypescriptOptions(): TsConfigJson {\n    const compilerOptions = this.#getTypescriptCompilerOptions()\n    return {\n      compilerOptions: {\n        ...compilerOptions,\n      },\n    }\n  }\n  #getTypescriptPluginOptions(): TypescriptPluginOptions {\n    const typescriptOptions = this.#getTypescriptOptions()\n    return {\n      ...typescriptOptions,\n      tsconfig: this.#builder.fromContextFolder(`tsconfig.json`),\n      cacheDir: this.#builder.fromContextFolder(`temp`, `.rollup_cache`),\n    }\n  }\n}\n"]}