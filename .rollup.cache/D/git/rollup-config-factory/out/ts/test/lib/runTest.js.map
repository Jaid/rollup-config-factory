{"version":3,"file":"runTest.js","sourceRoot":"","sources":["../../../../test/lib/runTest.ts"],"names":[],"mappings":"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","sourcesContent":["import type {FixtureConfig, TestContext} from '~/test/lib/types.js'\n\nimport path from 'node:path'\nimport {fileURLToPath, pathToFileURL} from 'node:url'\n\nimport fs from 'fs-extra'\nimport * as lodash from 'lodash-es'\n\nimport {toCleanYamlFile} from '~/lib/toYaml.js'\nimport {ConfigBuilder} from '~/src/ConfigBuilder.js'\nimport {debug, endTiming, startTiming} from '~/test/lib/debug.js'\n\nconst thisFolder = path.dirname(fileURLToPath(import.meta.url))\nconst rootFolder = path.resolve(thisFolder, `..`, `..`)\n\nexport const fixturesFolder = path.join(rootFolder, `test`, `fixture`)\nexport const outputFolder = path.join(rootFolder, `out`, `fixture`)\n\nexport const runTest = async (testContext: TestContext) => {\n  const id = testContext.name\n  const {fixtureProject, env} = /^(?<fixtureProject>.+)-(?<env>.+)$/.exec(id)!.groups!\n  const fixtureFolder = path.join(fixturesFolder, fixtureProject)\n  const outputFixtureFolder = path.join(outputFolder, id)\n  await fs.emptyDir(outputFixtureFolder)\n  const outputCompilationFolder = path.join(outputFixtureFolder, `out`)\n  const outputMetaFolder = path.join(outputFixtureFolder, `meta`)\n  const fixtureConfigFile = path.join(fixtureFolder, `config.ts`)\n  const fixtureConfigFileExists = await fs.pathExists(fixtureConfigFile)\n  let fixtureConfig: FixtureConfig = {}\n  if (fixtureConfigFileExists) {\n    fixtureConfig = await import(pathToFileURL(fixtureConfigFile).toString()) as FixtureConfig\n  }\n  const context = {\n    testContext,\n    fixture: fixtureProject,\n    id,\n    env,\n    fixtureFolder,\n    outputCompilationFolder,\n    outputMetaFolder,\n    outputFixtureFolder,\n  }\n  startTiming(`ConfigBuilder`)\n  let configBuilder: ConfigBuilder\n  if (fixtureConfig.configBuilder instanceof ConfigBuilder) {\n    configBuilder = fixtureConfig.configBuilder\n  } else if (fixtureConfig.configBuilder !== undefined) {\n    configBuilder = await fixtureConfig.configBuilder(context)\n  } else {\n    configBuilder = new ConfigBuilder({\n      contextFolder: fixtureFolder,\n      outputFolder: outputCompilationFolder,\n      env,\n    })\n  }\n  const config = await configBuilder.build()\n  endTiming(`ConfigBuilder`)\n  const outputMetaFileJobs: Array<Promise<void>> = []\n  const outputMeta = async (outputId: string, value: unknown) => {\n    if (!process.env.OUTPUT_META) {\n      return\n    }\n    const requestedOutputs = process.env.OUTPUT_META.split(`,`)\n    if (!requestedOutputs.includes(`*`) && !requestedOutputs.includes(outputId)) {\n      return\n    }\n    const file = path.join(outputMetaFolder, `${outputId}.yml`)\n    if (outputMetaFileJobs.length === 0) {\n      await fs.emptyDir(outputMetaFolder)\n    }\n    outputMetaFileJobs.push(toCleanYamlFile(value, file))\n  }\n  try {\n    await outputMeta(`env`, process.env)\n    await outputMeta(`context`, context)\n    await outputMeta(`config`, config)\n    startTiming(`rollup`)\n    const compilation = await configBuilder.compile()\n    endTiming(`rollup`)\n    await outputMeta(`compilation`, compilation)\n    await outputMeta(`builder`, lodash.clone(configBuilder))\n    // if (process.env.OUTPUT_STATS_JSON) {\n    //   const statsInstance = rollupOutput.toJson()\n    //   const statsFile = path.join(outputMetaFolder, `stats.json`)\n    //   await fs.writeJson(statsFile, statsInstance)\n    // }\n    // if (process.env.OUTPUT_ROLLUP_STATS) {\n    //   const statsFolder = path.join(outputMetaFolder, `stats`)\n    //   const statsInstances = compilationResult.stats.map(stat => stat.toJson())\n    //   await outputRollupStats(statsInstances, statsFolder)\n    //   console.log(`Rollup stats wrote to ${statsFolder}`)\n    // }\n    // if (rollupOutput.hasErrors()) {\n    //   for (const statsInstance of rollupOutput.stats) {\n    //     for (const error of statsInstance.compilation.errors) {\n    //       console.error(error)\n    //     }\n    //   }\n    //   throw new Error(`Compilation finished with errors`)\n    // }\n    if (fixtureConfig.checkExport) {\n      const exportName = fixtureConfig.mainName ?? `index.js`\n      const mainFile = path.join(outputCompilationFolder, exportName)\n      const exportValue = await import(pathToFileURL(mainFile).toString()) as {default: unknown}\n      await outputMeta(`export`, exportValue)\n      await fixtureConfig.checkExport(exportValue)\n    }\n  } finally {\n    await Promise.all(outputMetaFileJobs)\n  }\n}\n"]}