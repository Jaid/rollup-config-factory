{"version":3,"file":"toYaml.js","sourceRoot":"","sources":["../../../lib/toYaml.ts"],"names":[],"mappings":"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","sourcesContent":["import type {ScalarTag} from 'yaml'\n\nimport console from 'node:console'\n\nimport prettier from '@prettier/sync'\nimport is from '@sindresorhus/is'\nimport fs from 'fs-extra'\nimport yaml, {Document, isPair, isScalar, Pair, Scalar, YAMLMap} from 'yaml'\nimport {createNode as newNode} from 'yaml/util'\n\ntype StringifyReplacer = Parameters<typeof yaml[\"stringify\"]>[\"1\"]\ntype StringifyOptions = Parameters<typeof yaml[\"stringify\"]>[\"2\"]\n\nexport type Visitor = Parameters<typeof yaml[\"visit\"]>[1]\n\nexport const yamlStringifySettings: StringifyOptions = {\n  indentSeq: false,\n  lineWidth: 0,\n  minContentWidth: 0,\n  // nullStr: `~`,\n  singleQuote: true,\n}\nexport const replacer: StringifyReplacer = (key: string, value: unknown) => {\n  const type = typeof value\n  if (type === `function`) {\n    return\n  }\n  if (type === `string`) {\n    return value\n  }\n  if (type === `number`) {\n    return value\n  }\n  if (type === `boolean`) {\n    return value\n  }\n  if (type === `undefined`) {\n    return value\n  }\n  if (value === null) {\n    return value\n  }\n  if (value instanceof RegExp) {\n    return value.source\n  }\n  if (value instanceof Date) {\n    return value.toISOString()\n  }\n  if (value instanceof Set) {\n    return value as unknown\n  }\n  if (value instanceof Map) {\n    return value as unknown\n  }\n  if (Array.isArray(value)) {\n    return value as unknown\n  }\n  if (type === `object`) {\n    return value as unknown\n  }\n  return\n}\nexport const skipUnderscoreReplacer: StringifyReplacer = (key: string, value: unknown) => {\n  if (typeof key === `string` && key.startsWith(`_`)) {\n    return\n  }\n  return replacer(key, value)\n}\n\nexport const toYaml = (input: unknown) => {\n  return yaml.stringify(input, undefined, yamlStringifySettings)\n}\n\nexport const toYamlFile = async (input: unknown, file: string) => {\n  await fs.outputFile(file, toYaml(input))\n}\ntype ScalarOutputTag = Omit<ScalarTag, \"resolve\" | \"tag\">\n\nconst formatCode = (code: string) => {\n  const codeCompressed = code.replaceAll(/^\\s*[\\n\\r]/gm, ``)\n  const codeFormatted = prettier.format(codeCompressed, {\n    parser: `typescript`,\n    arrowParens: `avoid`,\n    bracketSameLine: true,\n    bracketSpacing: false,\n    embeddedLanguageFormatting: `off`,\n    jsxSingleQuote: true,\n    printWidth: 80,\n    quoteProps: `as-needed`,\n    requirePragma: false,\n    semi: false,\n    singleQuote: true,\n    tabWidth: 2,\n    trailingComma: `none`,\n  })\n  const codeTrimmed = codeFormatted.trim()\n  return codeTrimmed\n}\n\nexport const toCleanYaml = (input: unknown) => {\n  const regexOutputTag: ScalarOutputTag = {\n    identify: value => value instanceof RegExp,\n    createNode(schema, value: RegExp, ctx) {\n      const patternSource = value.toString()\n      const node = new Scalar(patternSource)\n      node.comment = ` RegExp`\n      return node\n    },\n  }\n  const bigIntOutputTag: ScalarOutputTag = {\n    identify: value => typeof value === `bigint`,\n    createNode(schema, value: bigint, ctx) {\n      const node = new Scalar(value)\n      node.comment = ` BigInt`\n      return node\n    },\n  }\n  const functionOutputTag: ScalarOutputTag = {\n    identify: value => typeof value === `function`,\n    createNode(schema, functionValue: Function, ctx) {\n      const node = new YAMLMap\n      let functionSource = functionValue.toString()\n      let formattingWorked = false\n      try {\n        functionSource = formatCode(functionSource)\n        formattingWorked = true\n      } catch (error) {\n        // console.error(`Error formatting function source code:`, error)\n      }\n      const comment = formattingWorked ? `[Formatted with Prettier]\\n${functionSource}` : functionSource\n      const commentIndented = comment.replaceAll(/^/gm, ` `)\n      if (functionValue.name !== undefined && functionValue.name !== ``) {\n        const nameScalar = new Scalar(functionValue.name)\n        nameScalar.comment = commentIndented\n        node.set(`name`, nameScalar)\n      } else {\n        node.comment = commentIndented\n      }\n      for (const [key, value] of Object.entries(functionValue)) {\n        node.set(key, value)\n      }\n      return node\n    },\n  }\n  // const classInstanceOutputTag: ScalarOutputTag = {\n  //   identify: value => {\n  //     if (!is.object(value)) {\n  //       return false\n  //     }\n  //     const className = value.constructor.name\n  //     if (!className) {\n  //       return false\n  //     }\n  //     const skippedNames = [\n  //       `Object`,\n  //       `Function`,\n  //       `Array`,\n  //       `Map`,\n  //       `Set`,\n  //       `Date`,\n  //       `RegExp`,\n  //     ]\n  //     if (skippedNames.includes(className)) {\n  //       return false\n  //     }\n  //     return true\n  //   },\n  //   createNode(schema, classInstanceValue: object, ctx) {\n  //     const node = new YAMLMap\n  //     const className = classInstanceValue.constructor.name\n  //     node.comment = ` ${className}`\n  //     for (const [key, value] of Object.entries(classInstanceValue)) {\n  //       node.set(key, value)\n  //     }\n  //     return node\n  //   },\n  // }\n  const document = new Document(input, {\n    anchorPrefix: `anchor`,\n    keepSourceTokens: true,\n    logLevel: `debug`,\n    customTags: tags => {\n      return [\n        bigIntOutputTag,\n        regexOutputTag,\n        functionOutputTag,\n        // classInstanceOutputTag,\n        ...tags,\n      ] as Array<ScalarTag>\n    },\n  })\n  // const removeFunctionsVisitor: Visitor = {\n  //   Scalar: (key, node, path) => {\n  //     const value = node.value\n  //     if (typeof value === `function`) {\n  //       const newNode = document.createNode({}, {flow: true})\n  //       newNode.comment = ` function:\\n ${value.toString()}`\n  //       return newNode\n  //     }\n  //   },\n  // }\n  const skipUnderscoreVisitor: Visitor = {\n    Pair: (key, node, path) => {\n      // @ts-expect-error\n      const fieldName = node.key?.value as unknown\n      if (typeof fieldName === `string` && fieldName.startsWith(`_`)) {\n        return yaml.visit.REMOVE\n      }\n    },\n  }\n  const loggerVisitor: Visitor = {\n    Node: (key, node, path) => {\n      console.dir({\n        key,\n        node,\n        path,\n      })\n    },\n  }\n  // const addCommentsToClassInstancesVisitor: Visitor = {\n  //   Pair: (key, node, path) => {\n  //     if (isPair(node) && isScalar(node.key) && isScalar(node.value)) {\n  //       const key = node.key.value\n  //       const value = node.value.value\n  //       if (typeof value === `object` && value !== null) {\n  //         const className = value.constructor.name\n  //         const newNode = document.createNode({}, {flow: true})\n  //         newNode.comment = ` ${className}`\n  //         return newNode\n  //       }\n  //     }\n  //   },\n  // }\n  // yaml.visit(document, loggerVisitor)\n  // yaml.visit(document, removeFunctionsVisitor)\n  yaml.visit(document, skipUnderscoreVisitor)\n  // yaml.visit(document, addCommentsToClassInstancesVisitor)\n  return document.toString({\n    ...yamlStringifySettings,\n  })\n}\n\nexport const toCleanYamlFile = async (input: unknown, file: string) => {\n  await fs.outputFile(file, toCleanYaml(input))\n}\n"]}